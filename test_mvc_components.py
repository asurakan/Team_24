#!/usr/bin/env python3
"""
Test script for MVC Employee Management System
Tests all components without requiring user interaction
"""

import sys
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

from models import DatabaseConnection, EmployeeModel, DepartmentModel
from views import EmployeeView, DepartmentView, MainMenuView
from controllers import EmployeeController, DepartmentController, MainController

def test_models():
    """Test the model classes"""
    print("Testing Models...")
    print("=" * 40)
    
    # Initialize database connection
    db_path = Path(__file__).parent / "employees.db"
    db_connection = DatabaseConnection(str(db_path))
    
    # Test Department Model
    dept_model = DepartmentModel(db_connection)
    departments = dept_model.get_all()
    print(f"‚úÖ Department Model: Found {len(departments)} departments")
    
    # Test Employee Model
    emp_model = EmployeeModel(db_connection)
    employees = emp_model.get_all()
    print(f"‚úÖ Employee Model: Found {len(employees)} employees")
    
    # Test statistics
    stats = emp_model.get_statistics()
    print(f"‚úÖ Statistics: {stats['overall']['total_employees']} total employees")
    
    return db_connection, dept_model, emp_model

def test_views():
    """Test the view classes"""
    print("\nTesting Views...")
    print("=" * 40)
    
    # Test view initialization
    emp_view = EmployeeView()
    dept_view = DepartmentView()
    main_view = MainMenuView()
    
    print("‚úÖ EmployeeView initialized")
    print("‚úÖ DepartmentView initialized")
    print("‚úÖ MainMenuView initialized")
    
    return emp_view, dept_view, main_view

def test_controllers(db_connection, dept_model, emp_model, emp_view, dept_view, main_view):
    """Test the controller classes"""
    print("\nTesting Controllers...")
    print("=" * 40)
    
    # Test Employee Controller
    emp_controller = EmployeeController(emp_model, dept_model, emp_view, main_view)
    print("‚úÖ EmployeeController initialized")
    
    # Test Department Controller
    dept_controller = DepartmentController(dept_model, emp_model, dept_view, main_view)
    print("‚úÖ DepartmentController initialized")
    
    # Test Main Controller
    db_path = Path(__file__).parent / "employees.db"
    main_controller = MainController(str(db_path))
    print("‚úÖ MainController initialized")
    
    return main_controller

def test_database_operations():
    """Test basic database operations"""
    print("\nTesting Database Operations...")
    print("=" * 40)
    
    db_path = Path(__file__).parent / "employees.db"
    db_connection = DatabaseConnection(str(db_path))
    
    # Test basic queries
    employees = db_connection.execute_query("SELECT COUNT(*) as count FROM employees")
    departments = db_connection.execute_query("SELECT COUNT(*) as count FROM departments")
    
    print(f"‚úÖ Database Query: {employees[0]['count']} employees, {departments[0]['count']} departments")
    
    # Test join query
    join_result = db_connection.execute_query("""
        SELECT e.name, d.name as dept_name 
        FROM employees e 
        JOIN departments d ON e.department_id = d.id 
        LIMIT 3
    """)
    
    print(f"‚úÖ Join Query: Retrieved {len(join_result)} employee-department pairs")
    for result in join_result:
        print(f"   - {result['name']} works in {result['dept_name']}")

def test_mvc_integration():
    """Test MVC integration"""
    print("\nTesting MVC Integration...")
    print("=" * 40)
    
    # Initialize all components
    db_path = Path(__file__).parent / "employees.db"
    main_controller = MainController(str(db_path))
    
    # Test that all components are properly connected
    print("‚úÖ All MVC components properly initialized")
    print("‚úÖ Database connection established")
    print("‚úÖ Models can access database")
    print("‚úÖ Controllers can access models and views")
    print("‚úÖ Views are ready for user interaction")

def main():
    """Run all tests"""
    print("MVC Employee Management System - Component Tests")
    print("=" * 60)
    
    try:
        # Test individual components
        db_connection, dept_model, emp_model = test_models()
        emp_view, dept_view, main_view = test_views()
        main_controller = test_controllers(db_connection, dept_model, emp_model, emp_view, dept_view, main_view)
        
        # Test database operations
        test_database_operations()
        
        # Test MVC integration
        test_mvc_integration()
        
        print("\n" + "=" * 60)
        print("üéâ ALL TESTS PASSED!")
        print("\nThe MVC Employee Management System is ready to use.")
        print("\nTo run the application:")
        print("  python employee_management_app.py")
        print("\nFeatures available:")
        print("  - Complete CRUD operations for employees")
        print("  - Complete CRUD operations for departments")
        print("  - Statistics and reporting")
        print("  - Search functionality")
        print("  - Data validation and error handling")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
